<?php

        function pensionCalculator(Request $request)//Main function
            {
                $f25lumpsumOption = $request->f25_lumpsum_opt;//Y=yes, N= no
                $fretirement_date = $request->retirement_date;//YYYY-MM-DD
                $foption_status = $request->option_status;//E=PNDCL247, N=Act766
                $fbirth_date = $request->birth_date;
                $total_months = $request->total_months;

                $hazardous = $request->nature_of_occupation;//H=hazardous, N=non-hazardous
                $total_months = $request->total_months;//overall total monthly contributions by member
                $averageTBY = $request->averageTBY;//Average three best years contributions by member

                $retirement_age_months = dateMonthsDifference($fbirth_date, $fretirement_date);
                $retirement_age_years = floor($retirement_age_months / 12);

                if ($retirement_age_years < 55) {
                    $status = 'fail';
                    $msg = 'Your retirement of ' . $retirement_age_years . ' does not qualify for pension. The minimum age for pension is 55 years.';
                    return responseMsg($status, $msg);
                }

                if ($retirement_age_years >= 55 && $retirement_age_years < 60) {
                    if ($hazardous == 'H') {
                        $ageReductionFactor = 1;
                    } else {
                        $ageReductionFactor = getEarlyRetirementReductionFactor($fbirth_date, $fretirement_date);
                    }
                } elseif ($retirement_age_years >= 60) {
                    $ageReductionFactor = 1;
                }

                if ($ageReductionFactor < 1) {
                    $fbenefit_description = 'Reduced Pension';
                } else {
                    $fbenefit_description = 'Full Pension';
                }

                $pensionRight = pensionRight($total_months, $foption_status);
                if ($pensionRight == 'error') {
                    $status = 'fail';
                    $msg = 'You do not have the minimum contributions to qualify for pension (ie PNDCL247 = 240, Act766 = 180)';
                    return responseMsg($status, $msg);
                }

                $monthlyPension = monthlyPension($averageTBY, $pensionRight, $ageReductionFactor);

                $annualPension = $monthlyPension * 12;

                if ($foption_status == 'E' && $f25lumpsumOption == 'Y') {
                    $flumpsum25_amount = lumpsum25($monthlyPension);
                    $residual_pension = 0.75 * $monthlyPension;
                } else {
                    $flumpsum25_amount = 0;
                    $residual_pension = 0;
                }

                $data = array('monthlyPension' => $monthlyPension, 'annualPension' => $annualPension, 'pensionRight' => $pensionRight, 'lumpsum25' => $flumpsum25_amount, 'residual_monthly_pension' => $residual_pension, 'benefit_description' => $fbenefit_description, 'retirement_age_years' => $retirement_age_years, 'ageReductionFactor' => $ageReductionFactor);

                $status = 'success';
                $msg = 'Pension Computed Successfully';
                return responseMsg($status, $msg, $data);
            }



        function dateMonthsDifference($begin_date, $end_date)// Function that give the total number of months between two dates
            {

                $begin_date = date('Y-m-01', strtotime($begin_date));

                $end_date = date('Y-m-01', strtotime($end_date));

                $from = Carbon::parse($begin_date);
                $to = Carbon::parse($end_date);

                $retirmentAge = $to->diffInMonths($from);
                return $retirmentAge;
            }



        function getEarlyRetirementReductionFactor($date_of_birth, $retirement_date)//For those who retire before the retirement age of 60 years
            {     
                $retirement_age_months=dateMonthsDifference($date_of_birth,$retirement_date);
                $retirement_age_years=floor($retirement_age_months/12);
                
                if($retirement_age_years<59)
                {   
                    $reductionfactor=SetAgeReductionFactor::where('fage','below_fifty_nine')->first();
                    $minimum_factor=($reductionfactor->fminimum_factor)/100;
                    $monthly_increment=$reductionfactor->fmonthly_increment/100;

                    $ageReductionFactor=$minimum_factor + (($retirement_age_months - (55*12)) * $monthly_increment);
                }
                else
                {    
                    $reductionfactor=SetAgeReductionFactor::where('fage','above_fifty_nine')->first();
                    $minimum_factor=($reductionfactor->fminimum_factor)/100;
                    $monthly_increment=$reductionfactor->fmonthly_increment/100;

                    $ageReductionFactor=$minimum_factor + (($retirement_age_months - (59*12)) * $monthly_increment);
                }

                return $ageReductionFactor;
            }

        function pensionRight($ftotalContributionMonths, $foption)// This function computes pension rights for pensioners
            {
                $pensionParameters = SetPensionRightParameters::where('foption', $foption)->first();

                $fbasePensionRight = $pensionParameters->fbase_pension_right;
                $fmaxPensionRight = $pensionParameters->fmax_pension_right;
                $fminimumContributionMonths = $pensionParameters->fmin_contribution_months;
                $fmonthlyIncrementalRate = $pensionParameters->fmonthly_increment_rate;

                if ($ftotalContributionMonths >= $fminimumContributionMonths) {
                    $pensionRight = $fbasePensionRight + (($ftotalContributionMonths - $fminimumContributionMonths) * $fmonthlyIncrementalRate);
                } else {
                    return 'error';
                }
                if ($pensionRight > $fmaxPensionRight) {
                    $pensionRight = $fmaxPensionRight;
                }
                return $pensionRight;
            }


        function monthlyPension($averageTBY, $pensionRight, $ageReductionFactor = 1) // this is a function
            {

                return $monthlyPension = ($averageTBY * ($pensionRight / 100) * $ageReductionFactor) / 12;
            }



        function lumpsum25($monthlyPension,$lodgement_date=null)// Finction that computes 25% lumpsum for those pensioners who opt for them
            {
                if($lodgement_date==null)
                {
                    $lodgement_date=date('Y-m-d');
                }
                
                if($lodgement_date>'2019-06-30')
                {
                    $annuityFactor = annuityFactorNew();
                }
                else
                {
                    $annuityFactor = annuityFactor();
                }

                $LumpSum25 = 0.25 * $monthlyPension * $annuityFactor;

                return $LumpSum25;
            }


        function annuityFactorNew($months = 144)// using discount rate of 4.47%
            {
                $fyear = date('Y');
        
                $benTBillRateAnnual = BenTBillRateAnnual::where('fyear', $fyear)->first();
        
                if (empty($benTBillRateAnnual)) {
                    $discountRate = 0.0473;
                } else {
                    $tBillRate = $benTBillRateAnnual->frate;
        
                    if ($tBillRate > 0.0473) {
                        $discountRate = 0.0473;
                    } else {
                        $discountRate = $tBillRate;
                    }
                }
        
                $monthlyDiscountRate = $discountRate / 12;
        
                return $annuityFactor = (1 - pow((1 + $monthlyDiscountRate), -($months))) / $monthlyDiscountRate;
            }



        function annuityFactor($months=144)//Old annuity factor used before 1st June 2019
            {
                $fyear=date('Y');
                
                $benTBillRateAnnual=BenTBillRateAnnual::where('fyear',$fyear)->first();
                
                if(empty($benTBillRateAnnual))
                {
                $discountRate=0.1;
                }
                else
                {
                    $tBillRate=$benTBillRateAnnual->frate;
                    
                    if($tBillRate>0.1)
                    {
                    $discountRate=0.1;
                    }
                    else
                    {
                    $discountRate=$tBillRate;
                    }
                }
            
                $monthlyDiscountRate=$discountRate/12;
            
                return $annuityFactor=(1 - pow((1+$monthlyDiscountRate),-($months)))/$monthlyDiscountRate;
            }


            
        function responseMsg($status, $msg, $data = array(), $statusCode = 200)
            {
                $response = response()->json([
                    'status' => $status,
                    'msg' => $msg,
                    'data' => $data,
                    'current_date' => getDateTimeFormatted()
                ], $statusCode);
       
                return $response;
            }
    

    ?>
